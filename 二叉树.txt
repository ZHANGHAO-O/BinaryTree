import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

class Node {
    public char val;
    public Node left;
    public Node right;

    public Node(char val) {
        this.val = val;
    }
}
public class BinaryTree {
    public Node createTree() {
        Node A = new Node('A');
        Node B = new Node('B');
        Node C = new Node('C');
        Node D = new Node('D');
        Node E = new Node('E');
        Node F = new Node('F');
        Node G = new Node('G');
        Node H = new Node('H');
        A.left = B;
        A.right = C;
        B.left = D;
        B.right = E;
        E.right = H;
        C.left = F;
        C.right = G;
        return A;
    }

    // 前序遍历
    void preOrderTraversal(Node root) {
        if (root == null) return;
        System.out.println(root.val+"");
        preOrderTraversal(root.left);
        preOrderTraversal(root.right);
    }

    // 中序遍历
    void inOrderTraversal(Node root) {
        if (root == null) return;
        inOrderTraversal(root.left);
        System.out.println(root.val+"");
        inOrderTraversal(root.right);
    }

    // 后序遍历
    void postOrderTraversal(Node root) {
        if (root == null) return;
        postOrderTraversal(root.left);
        postOrderTraversal(root.right);
        System.out.println(root.val+"");
    }

    // 遍历思路-求结点个数
    static int size = 0;

    void getSize1(Node root) {
        if (root == null) return;
        size++;
        getSize1(root.left);
        getSize1(root.right);
    }

    // 子问题思路-求结点个数
    int getSize2(Node root) {
        if (root == null) return 0;
        return getSize2(root.left)+getSize2(root.right)+1;
    }

    // 遍历思路-求叶子结点个数
    static int leafSize = 0;
    void getLeafSize1(Node root) {
        if (root==null) return;
        if (root.left==null&&root.right==null){
            leafSize++;
        }
        getSize1(root.left);
        getSize1(root.right);

    }

    // 子问题思路-求叶子结点个数
    int getLeafSize2(Node root) {
        if (root == null) return 0;
        if (root.left==null&&root.right==null){
            return 1;
        }
        /*if (root.left==null){
            return 1;
        }else if (root.right==null){
            return 1;
        }*/
        return getSize2(root.left)+getSize2(root.right);
    }

    // 子问题思路-求第 k 层结点个数
    int getKLevelSize(Node root,int k) {
        if (root==null) return 0;
        if (k == 1){
            return 1;
        }
        return getKLevelSize(root.left,k-1)+getKLevelSize(root.right,k-1);
    }

    //定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。说明: 叶子节点是指没有子节点的节点。
    int getHeight(Node root){
        if (root==null) return 0;
        int leftHeight = getHeight(root.left);
        int rightHeight = getHeight(root.right);
        return leftHeight>rightHeight?leftHeight+1:rightHeight+1;
    }





    // 查找 val 所在结点，没有找到返回 null
    // 按照 根 -> 左子树 -> 右子树的顺序进行查找
    // 一旦找到，立即返回，不需要继续在其他位置查找
    Node find(Node root,int val){
        if (root==null) return null;
        if (root.val == val){//根
            return root;
        }
        Node retLeft = find(root.left,val);
        //Node ret = find(root.right,val);
        if (retLeft != null){
            return retLeft;
        }
        Node retRight = find(root.right,val);
        if (retRight != null){
            return retRight;
        }
        return null;
    }

 //给定两个二叉树，编写一个函数来检验它们是否相同。如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。
    class Solution {
        public boolean isSameTree(Node p, Node q) {
            if (p == null && q != null || p != null && q == null) {
                return false;
            }
            if (p == null && q == null) {
                return true;
            }
            if (p.val != q.val) {
                return false;
            }
            return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
        }
                                                          //另一个树的子树。
        public boolean isSubtree(Node s, Node t) {       //给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。
            if (s == null || t == null) return false;    // s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。
            if (isSameTree(s,t));
            if (isSubtree(s.left,t)) return true;
            if (isSubtree(s.right,t)) return true;
            return false;
        }




     //给定一个二叉树，找出其最大深度。
     //二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。
     //说明: 叶子节点是指没有子节点的节点。
        public int maxDepth(Node root) {
            if(root == null) return 0;

            int leftHeight = maxDepth(root.left);
            int rightHeight = maxDepth(root.right);

            return leftHeight > rightHeight ?
                    leftHeight+1 : rightHeight+1;
        }
        public boolean isBalanced(Node root) {
            if(root == null) return true;
            int a = maxDepth(root.left);
            int b = maxDepth(root.right);
            if ((a-b)>1||(b-a)>1){
                return false;
            }
            return isBalanced(root.left)&&isBalanced(root.right);
        }



    }



    //给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。
        public List<List<Character>> levelOrder(Node root) {
            List<List<Character>> ret = new ArrayList<>();
            if(root == null){
                return ret;
            }
            Queue<Node> queue = new LinkedList<>();
            queue.offer(root);
            while(!queue.isEmpty()){
                List<Character> rowList = new ArrayList<>();
                int count = queue.size();
                while(count!=0){
                    Node cur = queue.poll();
                    if(cur!=null){
                        rowList.add(cur.val);
                        if(cur.left!=null){
                            queue.offer(cur.left);
                        }
                        if(cur.right!=null){
                            queue.offer(cur.right);
                        }
                    }
                    count--;
                }
                ret.add(rowList);
            }
            return ret;
        }


}
